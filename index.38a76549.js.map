{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,IAAM,EAAO,SAAS,aAAa,CAAC,QAEpC,CAAA,EAAK,OAAO,CAAG,SAAU,CAAC,EACxB,GAAI,AAAqB,OAArB,EAAE,MAAM,CAAC,OAAO,EAKpB,IASM,EATA,EAAS,AADJ,EAAE,MAAM,CACD,SAAS,CACrB,EAUN,AAAI,CAFE,EAAc,AADH,AADH,EAAK,aAAa,CAAC,SACV,IAAI,CAAC,EAAE,CACD,KAAK,CARP,EAQe,CAAC,WAAW,EAEtC,QAAQ,CAAC,KAChB,WAGF,MAAM,GAAe,SAAW,UAZvC,AAeF,SAAkB,CAAM,CAAE,CAAI,EAC5B,IAGI,EAHE,EAAQ,EAAK,aAAa,CAAC,SAC3B,EAAY,MAAM,IAAI,CAAC,EAAM,IAAI,EAIvC,OAAQ,GACN,IAAK,SACH,EAAU,SAAU,CAAI,CAAE,CAAI,EAC5B,OACE,WAAW,EAAK,KAAK,CAAC,EAAO,CAAC,WAAW,EACzC,WAAW,EAAK,KAAK,CAAC,EAAO,CAAC,WAAW,CAE7C,EACA,KACF,KAAK,SACH,EAAU,SAAU,CAAI,CAAE,CAAI,EAC5B,OAAO,EAAK,KAAK,CAAC,EAAO,CAAC,WAAW,CAAC,aAAa,CACjD,EAAK,KAAK,CAAC,EAAO,CAAC,WAAW,CAElC,EACA,KACF,KAAK,WACH,EAAU,SAAU,CAAI,CAAE,CAAI,EAQ5B,OAAO,AAPM,WACX,EAAK,KAAK,CAAC,EAAO,CAAC,WAAW,CAAC,OAAO,CAAC,QAAS,KAErC,WACX,EAAK,KAAK,CAAC,EAAO,CAAC,WAAW,CAAC,OAAO,CAAC,QAAS,IAIpD,CAEJ,CAEA,EAAU,IAAI,CAAC,GAEf,AAAA,EAAM,MAAM,CAAZ,KAAA,CAAA,E,A,S,C,E,G,M,O,C,G,O,E,E,EAAgB,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,IAClB,EAtDW,EAAQ,GACnB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar grid = document.querySelector(\"table\");\ngrid.onclick = function(e) {\n    if (e.target.tagName !== \"TH\") return;\n    var th = e.target;\n    var colNum = th.cellIndex;\n    var type = getColumnType(colNum);\n    sortGrid(colNum, type);\n};\nfunction getColumnType(colNum) {\n    var tbody = grid.querySelector(\"tbody\");\n    var firstRow = tbody.rows[0];\n    var cellContent = firstRow.cells[colNum].textContent;\n    if (cellContent.includes(\"$\")) return \"currency\";\n    return isNaN(cellContent) ? \"string\" : \"number\";\n}\nfunction sortGrid(colNum, type) {\n    var _tbody;\n    var tbody = grid.querySelector(\"tbody\");\n    var rowsArray = Array.from(tbody.rows);\n    var compare;\n    switch(type){\n        case \"number\":\n            compare = function compare(rowA, rowB) {\n                return parseFloat(rowA.cells[colNum].textContent) - parseFloat(rowB.cells[colNum].textContent);\n            };\n            break;\n        case \"string\":\n            compare = function compare(rowA, rowB) {\n                return rowA.cells[colNum].textContent.localeCompare(rowB.cells[colNum].textContent);\n            };\n            break;\n        case \"currency\":\n            compare = function compare(rowA, rowB) {\n                var valA = parseFloat(rowA.cells[colNum].textContent.replace(/[$,]/g, \"\"));\n                var valB = parseFloat(rowB.cells[colNum].textContent.replace(/[$,]/g, \"\"));\n                return valA - valB;\n            };\n            break;\n    }\n    rowsArray.sort(compare);\n    (_tbody = tbody).append.apply(_tbody, _to_consumable_array(rowsArray));\n}\n\n//# sourceMappingURL=index.38a76549.js.map\n","'use strict';\n\n'use strict';\n\nconst grid = document.querySelector('table');\n\ngrid.onclick = function (e) {\n  if (e.target.tagName !== 'TH') {\n    return;\n  }\n\n  const th = e.target;\n  const colNum = th.cellIndex;\n  const type = getColumnType(colNum);\n\n  sortGrid(colNum, type);\n};\n\nfunction getColumnType(colNum) {\n  const tbody = grid.querySelector('tbody');\n  const firstRow = tbody.rows[0];\n  const cellContent = firstRow.cells[colNum].textContent;\n\n  if (cellContent.includes('$')) {\n    return 'currency';\n  }\n\n  return isNaN(cellContent) ? 'string' : 'number';\n}\n\nfunction sortGrid(colNum, type) {\n  const tbody = grid.querySelector('tbody');\n  const rowsArray = Array.from(tbody.rows);\n\n  let compare;\n\n  switch (type) {\n    case 'number':\n      compare = function (rowA, rowB) {\n        return (\n          parseFloat(rowA.cells[colNum].textContent) -\n          parseFloat(rowB.cells[colNum].textContent)\n        );\n      };\n      break;\n    case 'string':\n      compare = function (rowA, rowB) {\n        return rowA.cells[colNum].textContent.localeCompare(\n          rowB.cells[colNum].textContent,\n        );\n      };\n      break;\n    case 'currency':\n      compare = function (rowA, rowB) {\n        const valA = parseFloat(\n          rowA.cells[colNum].textContent.replace(/[$,]/g, ''),\n        );\n        const valB = parseFloat(\n          rowB.cells[colNum].textContent.replace(/[$,]/g, ''),\n        );\n\n        return valA - valB;\n      };\n      break;\n  }\n\n  rowsArray.sort(compare);\n\n  tbody.append(...rowsArray);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","grid","document","querySelector","onclick","e","target","tagName","cellContent","colNum","th","cellIndex","type","firstRow","tbody","rows","cells","textContent","includes","isNaN","sortGrid","compare","rowsArray","from","rowA","rowB","parseFloat","localeCompare","valA","replace","sort","append","apply","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError"],"version":3,"file":"index.38a76549.js.map"}