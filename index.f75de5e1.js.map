{"mappings":"AAAA;AAEA;AAEA,MAAM,OAAO,SAAS,aAAa,CAAC;AAEpC,KAAK,OAAO,GAAG,SAAU,CAAC;IACxB,IAAI,EAAE,MAAM,CAAC,OAAO,KAAK,MACvB;IAGF,MAAM,KAAK,EAAE,MAAM;IACnB,MAAM,SAAS,GAAG,SAAS;IAC3B,MAAM,OAAO,cAAc;IAE3B,SAAS,QAAQ;AACnB;AAEA,SAAS,cAAc,MAAM;IAC3B,MAAM,QAAQ,KAAK,aAAa,CAAC;IACjC,MAAM,WAAW,MAAM,IAAI,CAAC,EAAE;IAC9B,MAAM,cAAc,SAAS,KAAK,CAAC,OAAO,CAAC,WAAW;IAEtD,IAAI,YAAY,QAAQ,CAAC,MACvB,OAAO;IAGT,OAAO,MAAM,eAAe,WAAW;AACzC;AAEA,SAAS,SAAS,MAAM,EAAE,IAAI;IAC5B,MAAM,QAAQ,KAAK,aAAa,CAAC;IACjC,MAAM,YAAY,MAAM,IAAI,CAAC,MAAM,IAAI;IAEvC,IAAI;IAEJ,OAAQ;QACN,KAAK;YACH,UAAU,SAAU,IAAI,EAAE,IAAI;gBAC5B,OACE,WAAW,KAAK,KAAK,CAAC,OAAO,CAAC,WAAW,IACzC,WAAW,KAAK,KAAK,CAAC,OAAO,CAAC,WAAW;YAE7C;YACA;QACF,KAAK;YACH,UAAU,SAAU,IAAI,EAAE,IAAI;gBAC5B,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,CACjD,KAAK,KAAK,CAAC,OAAO,CAAC,WAAW;YAElC;YACA;QACF,KAAK;YACH,UAAU,SAAU,IAAI,EAAE,IAAI;gBAC5B,MAAM,OAAO,WACX,KAAK,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS;gBAElD,MAAM,OAAO,WACX,KAAK,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS;gBAGlD,OAAO,OAAO;YAChB;YACA;IACJ;IAEA,UAAU,IAAI,CAAC;IAEf,MAAM,MAAM,IAAI;AAClB","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\n'use strict';\n\nconst grid = document.querySelector('table');\n\ngrid.onclick = function (e) {\n  if (e.target.tagName !== 'TH') {\n    return;\n  }\n\n  const th = e.target;\n  const colNum = th.cellIndex;\n  const type = getColumnType(colNum);\n\n  sortGrid(colNum, type);\n};\n\nfunction getColumnType(colNum) {\n  const tbody = grid.querySelector('tbody');\n  const firstRow = tbody.rows[0];\n  const cellContent = firstRow.cells[colNum].textContent;\n\n  if (cellContent.includes('$')) {\n    return 'currency';\n  }\n\n  return isNaN(cellContent) ? 'string' : 'number';\n}\n\nfunction sortGrid(colNum, type) {\n  const tbody = grid.querySelector('tbody');\n  const rowsArray = Array.from(tbody.rows);\n\n  let compare;\n\n  switch (type) {\n    case 'number':\n      compare = function (rowA, rowB) {\n        return (\n          parseFloat(rowA.cells[colNum].textContent) -\n          parseFloat(rowB.cells[colNum].textContent)\n        );\n      };\n      break;\n    case 'string':\n      compare = function (rowA, rowB) {\n        return rowA.cells[colNum].textContent.localeCompare(\n          rowB.cells[colNum].textContent,\n        );\n      };\n      break;\n    case 'currency':\n      compare = function (rowA, rowB) {\n        const valA = parseFloat(\n          rowA.cells[colNum].textContent.replace(/[$,]/g, ''),\n        );\n        const valB = parseFloat(\n          rowB.cells[colNum].textContent.replace(/[$,]/g, ''),\n        );\n\n        return valA - valB;\n      };\n      break;\n  }\n\n  rowsArray.sort(compare);\n\n  tbody.append(...rowsArray);\n}\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}